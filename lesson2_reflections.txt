Standardized Reflections:
What happens when you initialize a repository? Why do you need to do it?

	* git converts the folder into a valid repository by adding a .git folder and you need to do this so that you can start making commits.


How is the staging area different from the working directory and the repository? What value do you think it offers?

	* A git Working Folder is the project folder that contains all your actual files and has a git repository inside it.
	* A git Repository is the .git folder inside your Working Directory that contains your entire commit history and that makes the project folder a git working directory.
	* You can choose to selectively commit certain files only, by bundling them into a 'Staging Area' and then committing that.


How can you use the staging area to make sure you have one commit per logical change?

	* You can use it to only commit files that have had logical changes made to them and omit the files that do not.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	* If you want to develop experimental features that are high risk and could break your application, or if you want to have a development version of the application whose configuration is not suitable for production use.


How do the diagrams help you visualize the branch structure?

	* You can determine where one branch branched off of another branch (such as the main one) and how out of sync they may be.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	* You create a commit with two parents (the tips of the previous two branches), with the new tip being labeled with the label used by the first branch being merged (the one you checked out as when your execute the git merge command).
	* A major benefit to representing the git commit history as a graph is to determine which commits belong to which branch after a merge. This is valuable, as after a merge, a git log will only sort commits by date and the parents of those commits will not be obvious as they won't necessarily be the commit that came before.


What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	* Merging automatically allows you to not have to deal with obvious, small additions that are easy for computers to understand. Well structured code has more of these situations as code tends to be compartmentalized more
	* However automatic merging can fail often when additions in both branches where made to the same part of the code, in which case git will call for an intervention.
	* Merging manually allows you to always make sure the code is merged properly and in a way that makes sense, which is not guaranteed by a git merge.
	* It can get tedious very quickly and it can get hard to track many changes.

