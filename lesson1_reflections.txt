Standardized Reflections:
How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	* Only changes where shown and a change caused the bug


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

	* You can go back and understand why things where done a certain way and work from an older, better version if appropriate.


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	* Every version change is meaningful.
	* However if you want to switch workstations you have to compromise on this principle if you only synchronize with version-control.
	* Also auto save is of course very frequent and captures almost every change regardless of meaningfulness.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

	* They treat all files as a single coherent project, whereas a Google doc does not.


How can you use the commands git log and git diff to view the history of files?

	* git log is used to find the different 'commits' or historical states of the project and their IDs
	* git diff is used to compare those historical states as identified by those IDs.


How might using version control make you more confident to make changes that
could break something?

	* It is very easy to go back and restore it to a previous state, compare the different states and have many states that I can keep a record of.
	* It makes me feel safe when I make drastic changes.



Now that you have your workspace set up, what do you want to try using Git for?

	* To publicly share projects and to implement a safe, version centric control of my project's life cycle and history.

